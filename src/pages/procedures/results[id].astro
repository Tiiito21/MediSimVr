---

import LayoutProf from '../../layouts/LayoutProf.astro'
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import SideNav from '../../components/SideNav.astro';

let datosCookie;

if (Astro.cookies.has("userData")) {
const cookie = Astro.cookies.get("userData")
    if(cookie){
        datosCookie = JSON.parse(cookie.value);
    }
    
}
else{
    return Astro.redirect('/login');
}

const { id } = Astro.params;

const procedure = await fetch(`https://medisimback-production.up.railway.app/getProcedure/${id}`)
.then(response => {
    if (response.ok) {
        return response.json();
    } else {
        console.error('Error al obtener el procedimiento');
        console.log(response.text());
        return null;
    }
})
.catch(error => {
    console.error('Error al obtener el procedimiento:', error);
    return null;
})

if(!procedure){
    // return Astro.redirect('/404');
}

---

<LayoutProf title="Procedimientos Medicos">

  <Header estado={datosCookie.type}/>
  <div class="flex gap-3 min-h-screen">
      <SideNav nombre={datosCookie.name} estado={datosCookie.type} userid={datosCookie.userid}/>
      <main class="w-full mt-3 mx-2" data-nombre={procedure.nombre} data-userid={datosCookie.userid}>
        <h1 class="text-2xl font-bold text-text mb-5" >Procedimiento: {procedure.procedurename}</h1>
        <section class="grid grid-cols-2 w-full">
            <div class="flex flex-col items-start justify-start gap-4">
                <p class="text-subtext"><span class="font-bold text-text opacity-90">Fecha: </span> {procedure.date}</p>

                <p class="text-subtext"><span class="font-bold text-text opacity-90">Puntuacion Obtenida: </span> {procedure.score}</p>
                <p class="text-subtext"><span class="font-bold text-text opacity-90">Numero errores: </span> {procedure.errors}</p>
                <p class="text-subtext"><span class="font-bold text-text opacity-90">Tiempo total: </span> {procedure.time}</p>
                
            </div>
            <img src="/Uso.webp" alt="Imagen del procedimiento" class="h-3/4" />
        </section>  
    </main>
    </div>

    <Footer />

    <script slot="script">


        const main = document.querySelector('main');
        const procedureName = main.dataset.nombre;
        const userid = main.dataset.userid;

        const buttonProcedure = document.getElementById('buttonProcedure');


        const onClickButton = () => {
            console.log('Comenzar procedimiento');
            //Crear valores random para: tiempo, puntaje, errores
            const time = Math.floor(Math.random() * 20) + 40;
            const randomNumber = Math.floor(Math.random() * 100) + 1;

            // Determinar el puntaje basado en la probabilidad
            let score;
            if (randomNumber <= 80) {
                // Si el número aleatorio es <= 80, el 80% de las veces, el puntaje será mayor o igual a 50
                score = Math.floor(Math.random() * 51) + 50; // Generar un número aleatorio entre 50 y 100
            } else {
                // Si el número aleatorio es > 80, el 20% de las veces, el puntaje será menor a 50
                score = Math.floor(Math.random() * 50); // Generar un número aleatorio entre 0 y 49
            }
            const errors = Math.floor(Math.random() * 20) + 1;

            const date = new Date();
            const dateString = date.toLocaleString(); // Formato: MM/DD/AAAA, HH:MM:SS

            const datos = {
                time: time,
                score: score,
                errors: errors,
                procedureName: procedureName,
                userid: userid,
                date: dateString 
            }

            //Hacer llamada a la API
            fetch('http://localhost:8080/createProcedure', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json' // Indicar que el cuerpo de la solicitud es JSON
                },
                body: JSON.stringify(datos) // Convertir el objeto a JSON
            })
            .then(response => {
                if (response.ok) {
                    // Si la solicitud se completó correctamente (estado 200 OK), maneja la respuesta aquí
                    return response.json();
                } else if (response.status === 500) {
                // Si hay un error en la solicitud del cliente (estado 400 Bad Request)
                    console.error('Error al crear el procedimiento');
                    console.log(response.text()); // Convertir el cuerpo de la respuesta a texto
                }else {
                    // Si hay un error en el servidor (cualquier otro estado)
                    console.error('Error en el servidor:', response.statusText);
                    throw new Error('Error en el servidor');
                }
            })
            .then(data => {
                if(data){
                    window.location.replace(`/procedures/results${data.id}`);
                }
                
            })
            .catch(error => {
                console.error('Error al iniciar sesion con usuario: ', error);
            });
            


        }
        buttonProcedure.addEventListener('click', onClickButton);
        
    </script>
    
</LayoutProf>
      
